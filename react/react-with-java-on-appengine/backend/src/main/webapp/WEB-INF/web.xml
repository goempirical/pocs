<web-app id="WebApp_ID" version="2.4"
	xmlns="http://java.sun.com/xml/ns/j2ee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee 
	http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd">
	<display-name>video poker</display-name>

	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>/WEB-INF/application-context.xml</param-value>
	</context-param>

	<!-- To disable xml validation in production as specified in this document: 
		https://cloud.google.com/appengine/articles/spring_optimization -->
	<context-param>
		<param-name>contextClass</param-name>
		<param-value>com.m2i.app.adapters.context.CustomXmlWebApplicationContext
		</param-value>
	</context-param>

	<!-- Needed to load application context. we need to load the application 
		context so we can have the auth filter and the bean that it uses at the application 
		level. we can't have this at the servlet level otherwise it will fail when 
		hitting a different instance in GAE -->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener
		</listener-class>
	</listener>

	<!-- Needed so we can use beans in the filter -->
	<listener>
		<listener-class>org.springframework.web.context.request.RequestContextListener
		</listener-class>
	</listener>

	<!-- Main Servlet -->
	<servlet>
		<servlet-name>dispatcher</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet
		</servlet-class>
	</servlet>

	<servlet-mapping>
		<servlet-name>dispatcher</servlet-name>
		<url-pattern>/</url-pattern>
	</servlet-mapping>

	<!-- Enable "CORS" -->
	<filter>
		<filter-name>CORS</filter-name>
		<filter-class>com.thetransactioncompany.cors.CORSFilter</filter-class>
		<init-param>
	        <param-name>cors.supportedMethods</param-name>
	        <param-value>GET, HEAD, POST, PUT, OPTIONS, DELETE</param-value>
	    </init-param>
	</filter>
	<filter-mapping>
		<filter-name>CORS</filter-name>
		<servlet-name>dispatcher</servlet-name>
	</filter-mapping>

	<!-- Enable Objectify -->
	<filter>
		<filter-name>ObjectifyFilter</filter-name>
		<filter-class>com.googlecode.objectify.ObjectifyFilter</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>ObjectifyFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

	<!-- Delegate to spring aware filter defined in application-context.xml 
		We do this for being able to load context bean which is request scoped -->
	<filter>
		<filter-name>authFilterDelegator</filter-name>
		<filter-class>org.springframework.web.filter.DelegatingFilterProxy
		</filter-class>
		<init-param>
			<param-name>targetBeanName</param-name>
			<param-value>authFilter</param-value>
		</init-param>
	</filter>

	<filter-mapping>
		<filter-name>authFilterDelegator</filter-name>
		<url-pattern>/api/*</url-pattern>
	</filter-mapping>

</web-app>